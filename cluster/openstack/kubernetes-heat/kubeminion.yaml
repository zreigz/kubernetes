heat_template_version: 2014-10-16

description: >
  This is a nested stack that defines a single Kubernetes minion, This stack is
  included by an AutoScalingGroup resource in the parent template
  (kubecluster.yaml).

parameters:

  server_image:
    type: string
    description: glance image used to boot the server

  minion_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  external_network:
    type: string
    description: uuid/name of a network to use for floating ip addresses

  kubernetes_server_url:
    type: string
    description: URL of kubernetes server binary. Must be tar.gz.

  kubernetes_salt_url:
    type: string
    description: URL of kubernetes salt scripts. Must be tar.gz.

  kube_user_yaml_url:
    type: string
    description: URL of salt template script kube-user.yaml.

  provision_network_node_sh_url:
    type: string
    description: URL of salt template provision-network-node.sh.

  write_heat_params_yaml_url:
    type: string
    description: URL of salt template script write-heat-params.yaml.

  deploy_kube_auth_files_node_yaml_url:
    type: string
    description: URL of salt template script deploy-kube-auth-files-node.yaml.

  configure_salt_yaml_url:
    type: string
    description: URL of salt template script configure_salt.yaml.

  run_salt_sh_url:
    type: string
    description: URL of salt template script run-salt.sh.

  token_kubelet:
    type: string
    description: Token used by kubelet

  token_kube_proxy:
    type: string
    description: Token used by kube-proxy

  # The following are all generated in the parent template.
  kube_master_ip:
    type: string
    description: IP address of the Kubernetes master server.
  fixed_network:
    type: string
    description: Network from which to allocate fixed addresses.
  fixed_subnet:
    type: string
    description: Subnet from which to allocate fixed addresses.
  wait_condition_timeout:
    type: number
    description : >
      timeout for the Wait Conditions
  metadata:
    type: json
    description: metadata for ceilometer query
  cluster_name:
    type: string

resources:

  minion_wait_handle:
    type: OS::Heat::WaitConditionHandle

  minion_wait_condition:
    type: OS::Heat::WaitCondition
    depends_on: kube_minion
    properties:
      handle: {get_resource: minion_wait_handle}
      timeout: {get_param: wait_condition_timeout}

  secgroup_all_open:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  #

  write_heat_params:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_param: write_heat_params_yaml_url}
          params:
            "$KUBERNETES_SERVER_URL": {get_param: kubernetes_server_url}
            "$KUBERNETES_SALT_URL": {get_param: kubernetes_salt_url}
            "$MASTER_IP": {get_param: kube_master_ip}

  kube_user:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_param: kube_user_yaml_url}

  provision_network_node:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_param: provision_network_node_sh_url}

  deploy_kube_auth_files_node:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_param: deploy_kube_auth_files_node_yaml_url}
          params:
            "$token_kubelet": {get_param: token_kubelet}
            "$token_kube_proxy": {get_param: token_kube_proxy}

  configure_salt_node:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_param: configure_salt_yaml_url}
          params:
            "$MASTER_IP": {get_param: kube_master_ip}
            "$role": "kubernetes-pool"

  run_salt:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_param: run_salt_sh_url}
          params:
            "$$wc_notify": {get_attr: [minion_wait_handle, curl_cli]}

  kube_minion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: write_heat_params}
        - config: {get_resource: kube_user}
        - config: {get_resource: provision_network_node}
        - config: {get_resource: deploy_kube_auth_files_node}
        - config: {get_resource: configure_salt_node}
        - config: {get_resource: run_salt}

  ######################################################################
  #
  # a single kubernetes minion.
  #
  server_name_post_fix:
    type: OS::Heat::RandomString
    properties:
      length: 8

  kube_minion:
    type: OS::Nova::Server
    properties:
      image: {get_param: server_image}
      flavor: {get_param: minion_flavor}
      key_name: {get_param: ssh_key_name}
      metadata: {get_param: metadata}
      user_data_format: RAW
      user_data: {get_resource: kube_minion_init}
      networks:
        - port: {get_resource: kube_minion_eth0}
      name:
        list_join: [-, [{get_param: cluster_name}, node, {get_resource: server_name_post_fix}]]

  kube_minion_eth0:
    type: OS::Neutron::Port
    properties:
      network: {get_param: fixed_network}
      security_groups:
        - get_resource: secgroup_all_open
      fixed_ips:
        - subnet: {get_param: fixed_subnet}
      replacement_policy: AUTO

  kube_minion_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: kube_minion_eth0}

outputs:

  kube_minion_ip:
    value: {get_attr: [kube_minion_eth0, fixed_ips, 0, ip_address]}
  kube_minion_external_ip:
    value: {get_attr: [kube_minion_floating, floating_ip_address]}
